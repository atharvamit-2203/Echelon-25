# -*- coding: utf-8 -*-
"""datasheet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S0ELs-a42P4BUHyHKLPS0Eaa5ubEGZy-
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Load the dataset
file_path = "/content/t.csv"
df = pd.read_csv(file_path)

# Handle missing values
df.fillna(method='ffill', inplace=True)

# Convert 'TotalCharges' to numeric (it may have been read as an object)
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.fillna({'TotalCharges': df['TotalCharges'].median()}, inplace=True)

# Encode categorical variables
label_encoders = {}
categorical_columns = ['gender', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines',
                       'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
                       'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',
                       'PaymentMethod', 'Churn']

for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Define customer segmentation

def classify_customer(row):
    if row['Churn'] == 1:
        return 'At-Risk'
    elif row['tenure'] > 24 and row['Contract'] in [1, 2]:  # Contract 1 = One year, 2 = Two years
        return 'Loyal'
    else:
        return 'Potential'

# Apply classification
df['Customer_Segment'] = df.apply(classify_customer, axis=1)

# Display segment counts
print(df['Customer_Segment'].value_counts())

# Save the results
df.to_csv("/content/customer_segmentation.csv", index=False)
print("Customer segmentation saved successfully!")

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from google.colab import files

# Upload the CSV file manually in Colab
uploaded = files.upload()
file_path = list(uploaded.keys())[0]

# Load the dataset
df = pd.read_csv(file_path)

# Handle missing values
df.fillna(method='ffill', inplace=True)

# Convert 'TotalCharges' to numeric (it may have been read as an object)
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.fillna({'TotalCharges': df['TotalCharges'].median()}, inplace=True)

# Encode categorical variables
label_encoders = {}
categorical_columns = ['gender', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines',
                       'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
                       'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',
                       'PaymentMethod', 'Churn']

for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Define customer segmentation
def classify_customer(row):
    if row['Churn'] == 1:
        return 'At-Risk'
    elif row['tenure'] > 24 and row['Contract'] in [1, 2]:  # Contract 1 = One year, 2 = Two years
        return 'Loyal'
    else:
        return 'Potential'

# Apply classification
df['Customer_Segment'] = df.apply(classify_customer, axis=1)

# Function to provide predefined suggestions
def generate_suggestion(segment):
    suggestions = {
        "Loyal": "Offer exclusive discounts, referral bonuses, and loyalty rewards.",
        "At-Risk": "Provide retention incentives like personalized discounts and better support.",
        "Potential": "Send targeted promotions and engagement offers to boost retention."
    }
    return suggestions.get(segment, "No suggestion available")

# Generate suggestions based on segment
df['Suggestion'] = df['Customer_Segment'].apply(generate_suggestion)

# Save the results
output_file = "/content/customer_segmentation_with_suggestions.csv"
df.to_csv(output_file, index=False)
print(f"Customer segmentation with suggestions saved successfully: {output_file}")

# Display first few rows
df.head()